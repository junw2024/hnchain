// Code generated by goctl. DO NOT EDIT.
// Source: product.proto

package productclient

import (
	"context"

	"hnchain/product/rpc/product"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CategoryItem           = product.CategoryItem
	CategoryItemReq        = product.CategoryItemReq
	CategoryItemRsp        = product.CategoryItemRsp
	CheckAndUpdateStockReq = product.CheckAndUpdateStockReq
	CheckAndUpdateStockRsp = product.CheckAndUpdateStockRsp
	DecrStockReq           = product.DecrStockReq
	DecrStockRsp           = product.DecrStockRsp
	OperationProductsReq   = product.OperationProductsReq
	OperationProductsRsp   = product.OperationProductsRsp
	ProductItem            = product.ProductItem
	ProductItemReq         = product.ProductItemReq
	ProductListReq         = product.ProductListReq
	ProductListRsp         = product.ProductListRsp
	ProductRecommendReq    = product.ProductRecommendReq
	ProductRecommendRsp    = product.ProductRecommendRsp
	ProductReq             = product.ProductReq
	ProductRsp             = product.ProductRsp
	UpdateProductStockReq  = product.UpdateProductStockReq
	UpdateProductStockRsp  = product.UpdateProductStockRsp

	Product interface {
		// 查询产品信息
		Product(ctx context.Context, in *ProductItemReq, opts ...grpc.CallOption) (*ProductItem, error)
		// 查询集合的商品信息
		Products(ctx context.Context, in *ProductReq, opts ...grpc.CallOption) (*ProductRsp, error)
		// 查询指定分类的商品分页
		ProductList(ctx context.Context, in *ProductListReq, opts ...grpc.CallOption) (*ProductListRsp, error)
		// 刷新运营产品缓存
		OperationProducts(ctx context.Context, in *OperationProductsReq, opts ...grpc.CallOption) (*OperationProductsRsp, error)
		// 根据目标量，增加库存
		UpdateProductStock(ctx context.Context, in *UpdateProductStockReq, opts ...grpc.CallOption) (*UpdateProductStockRsp, error)
		// 扣减库存(缓存)
		CheckAndUpdateStock(ctx context.Context, in *CheckAndUpdateStockReq, opts ...grpc.CallOption) (*CheckAndUpdateStockRsp, error)
		// 检查库存量
		CheckProductStock(ctx context.Context, in *UpdateProductStockReq, opts ...grpc.CallOption) (*UpdateProductStockRsp, error)
		RollbackProductStock(ctx context.Context, in *UpdateProductStockReq, opts ...grpc.CallOption) (*UpdateProductStockRsp, error)
		// 事务:扣减库存
		DecrStock(ctx context.Context, in *DecrStockReq, opts ...grpc.CallOption) (*DecrStockRsp, error)
		// 事务:扣减库存,再加回去
		DecrStockRevert(ctx context.Context, in *DecrStockReq, opts ...grpc.CallOption) (*DecrStockRsp, error)
		// 根据类父ID,查询分类列表
		CategoryList(ctx context.Context, in *CategoryItemReq, opts ...grpc.CallOption) (*CategoryItemRsp, error)
		// 目标数量的推荐商品
		ProductRecommends(ctx context.Context, in *ProductRecommendReq, opts ...grpc.CallOption) (*ProductRecommendRsp, error)
	}

	defaultProduct struct {
		cli zrpc.Client
	}
)

func NewProduct(cli zrpc.Client) Product {
	return &defaultProduct{
		cli: cli,
	}
}

// 查询产品信息
func (m *defaultProduct) Product(ctx context.Context, in *ProductItemReq, opts ...grpc.CallOption) (*ProductItem, error) {
	client := product.NewProductClient(m.cli.Conn())
	return client.Product(ctx, in, opts...)
}

// 查询集合的商品信息
func (m *defaultProduct) Products(ctx context.Context, in *ProductReq, opts ...grpc.CallOption) (*ProductRsp, error) {
	client := product.NewProductClient(m.cli.Conn())
	return client.Products(ctx, in, opts...)
}

// 查询指定分类的商品分页
func (m *defaultProduct) ProductList(ctx context.Context, in *ProductListReq, opts ...grpc.CallOption) (*ProductListRsp, error) {
	client := product.NewProductClient(m.cli.Conn())
	return client.ProductList(ctx, in, opts...)
}

// 刷新运营产品缓存
func (m *defaultProduct) OperationProducts(ctx context.Context, in *OperationProductsReq, opts ...grpc.CallOption) (*OperationProductsRsp, error) {
	client := product.NewProductClient(m.cli.Conn())
	return client.OperationProducts(ctx, in, opts...)
}

// 根据目标量，增加库存
func (m *defaultProduct) UpdateProductStock(ctx context.Context, in *UpdateProductStockReq, opts ...grpc.CallOption) (*UpdateProductStockRsp, error) {
	client := product.NewProductClient(m.cli.Conn())
	return client.UpdateProductStock(ctx, in, opts...)
}

// 扣减库存(缓存)
func (m *defaultProduct) CheckAndUpdateStock(ctx context.Context, in *CheckAndUpdateStockReq, opts ...grpc.CallOption) (*CheckAndUpdateStockRsp, error) {
	client := product.NewProductClient(m.cli.Conn())
	return client.CheckAndUpdateStock(ctx, in, opts...)
}

// 检查库存量
func (m *defaultProduct) CheckProductStock(ctx context.Context, in *UpdateProductStockReq, opts ...grpc.CallOption) (*UpdateProductStockRsp, error) {
	client := product.NewProductClient(m.cli.Conn())
	return client.CheckProductStock(ctx, in, opts...)
}

func (m *defaultProduct) RollbackProductStock(ctx context.Context, in *UpdateProductStockReq, opts ...grpc.CallOption) (*UpdateProductStockRsp, error) {
	client := product.NewProductClient(m.cli.Conn())
	return client.RollbackProductStock(ctx, in, opts...)
}

// 事务:扣减库存
func (m *defaultProduct) DecrStock(ctx context.Context, in *DecrStockReq, opts ...grpc.CallOption) (*DecrStockRsp, error) {
	client := product.NewProductClient(m.cli.Conn())
	return client.DecrStock(ctx, in, opts...)
}

// 事务:扣减库存,再加回去
func (m *defaultProduct) DecrStockRevert(ctx context.Context, in *DecrStockReq, opts ...grpc.CallOption) (*DecrStockRsp, error) {
	client := product.NewProductClient(m.cli.Conn())
	return client.DecrStockRevert(ctx, in, opts...)
}

// 根据类父ID,查询分类列表
func (m *defaultProduct) CategoryList(ctx context.Context, in *CategoryItemReq, opts ...grpc.CallOption) (*CategoryItemRsp, error) {
	client := product.NewProductClient(m.cli.Conn())
	return client.CategoryList(ctx, in, opts...)
}

// 目标数量的推荐商品
func (m *defaultProduct) ProductRecommends(ctx context.Context, in *ProductRecommendReq, opts ...grpc.CallOption) (*ProductRecommendRsp, error) {
	client := product.NewProductClient(m.cli.Conn())
	return client.ProductRecommends(ctx, in, opts...)
}
