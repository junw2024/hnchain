// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"hnchain/common/distributedid"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	replyFieldNames          = builder.RawFieldNames(&Reply{}, true)
	replyRows                = strings.Join(replyFieldNames, ",")
	replyRowsExpectAutoSet   = strings.Join(stringx.Remove(replyFieldNames), ",")
	replyRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(replyFieldNames, "id"))

	cachePublicReplyIdPrefix = "cache:public:reply:id:"
)

type (
	replyModel interface {
		Insert(ctx context.Context, data *Reply) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Reply, error)
		Update(ctx context.Context, data *Reply) error
		Delete(ctx context.Context, id int64) error
	}

	defaultReplyModel struct {
		sqlc.CachedConn
		table string
	}

	Reply struct {
		Id            int64     `db:"id"`
		Business      string    `db:"business"`        // 评论业务类型
		Targetid      int64     `db:"targetid"`        // 评论目标id
		ReplyUserid   int64     `db:"reply_userid"`    // 回复用户id
		BeReplyUserid int64     `db:"be_reply_userid"` // 被回复用户id
		Parentid      int64     `db:"parentid"`        // 父评论id
		Content       string    `db:"content"`         // 评论内容
		Imageurl      string    `db:"imageurl"`        // 评论内容
		Createtime    time.Time `db:"createtime"`
		Updatetime    time.Time `db:"updatetime"`
	}
)

func newReplyModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultReplyModel {
	return &defaultReplyModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      `"public"."reply"`,
	}
}

func (m *defaultReplyModel) Delete(ctx context.Context, id int64) error {
	publicReplyIdKey := fmt.Sprintf("%s%v", cachePublicReplyIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where id = $1", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, publicReplyIdKey)
	return err
}

func (m *defaultReplyModel) FindOne(ctx context.Context, id int64) (*Reply, error) {
	publicReplyIdKey := fmt.Sprintf("%s%v", cachePublicReplyIdPrefix, id)
	var resp Reply
	err := m.QueryRowCtx(ctx, &resp, publicReplyIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", replyRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultReplyModel) Insert(ctx context.Context, data *Reply) (sql.Result, error) {
	idgenerator := distributedid.NewSnowflake(int64(1))
	data.Id = idgenerator.GenerateId()

	publicReplyIdKey := fmt.Sprintf("%s%v", cachePublicReplyIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)", m.table, replyRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.Business, data.Targetid, data.ReplyUserid, data.BeReplyUserid, data.Parentid, data.Content, data.Imageurl, data.Createtime, data.Updatetime)
	}, publicReplyIdKey)
	return ret, err
}

func (m *defaultReplyModel) Update(ctx context.Context, data *Reply) error {
	publicReplyIdKey := fmt.Sprintf("%s%v", cachePublicReplyIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, replyRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Id, data.Business, data.Targetid, data.ReplyUserid, data.BeReplyUserid, data.Parentid, data.Content, data.Imageurl, data.Createtime, data.Updatetime)
	}, publicReplyIdKey)
	return err
}

func (m *defaultReplyModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cachePublicReplyIdPrefix, primary)
}

func (m *defaultReplyModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", replyRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultReplyModel) tableName() string {
	return m.table
}
