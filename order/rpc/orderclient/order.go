// Code generated by goctl. DO NOT EDIT.
// Source: order.proto

package orderclient

import (
	"context"

	"hnchain/order/rpc/order"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddOrderReq           = order.AddOrderReq
	AddOrderRsp           = order.AddOrderRsp
	CreateOrderReq        = order.CreateOrderReq
	CreateOrderRsp        = order.CreateOrderRsp
	GetOrderByOrdernumReq = order.GetOrderByOrdernumReq
	GetOrderByOrdernumRsp = order.GetOrderByOrdernumRsp
	Orderitem             = order.Orderitem
	Orders                = order.Orders
	OrdersReq             = order.OrdersReq
	OrdersRsp             = order.OrdersRsp

	Order interface {
		// 个人订单分页
		Orders(ctx context.Context, in *OrdersReq, opts ...grpc.CallOption) (*OrdersRsp, error)
		// 创建订单
		CreateOrder(ctx context.Context, in *CreateOrderReq, opts ...grpc.CallOption) (*CreateOrderRsp, error)
		// 订单创建验证
		CreateOrderCheck(ctx context.Context, in *CreateOrderReq, opts ...grpc.CallOption) (*CreateOrderRsp, error)
		// 回滚订单
		RollbackOrder(ctx context.Context, in *CreateOrderReq, opts ...grpc.CallOption) (*CreateOrderRsp, error)
		// 创建订单try
		CreateOrderDTM(ctx context.Context, in *AddOrderReq, opts ...grpc.CallOption) (*AddOrderRsp, error)
		// 回撤
		CreateOrderDTMRevert(ctx context.Context, in *AddOrderReq, opts ...grpc.CallOption) (*AddOrderRsp, error)
		GetOrderByOrdernum(ctx context.Context, in *GetOrderByOrdernumReq, opts ...grpc.CallOption) (*GetOrderByOrdernumRsp, error)
	}

	defaultOrder struct {
		cli zrpc.Client
	}
)

func NewOrder(cli zrpc.Client) Order {
	return &defaultOrder{
		cli: cli,
	}
}

// 个人订单分页
func (m *defaultOrder) Orders(ctx context.Context, in *OrdersReq, opts ...grpc.CallOption) (*OrdersRsp, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.Orders(ctx, in, opts...)
}

// 创建订单
func (m *defaultOrder) CreateOrder(ctx context.Context, in *CreateOrderReq, opts ...grpc.CallOption) (*CreateOrderRsp, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.CreateOrder(ctx, in, opts...)
}

// 订单创建验证
func (m *defaultOrder) CreateOrderCheck(ctx context.Context, in *CreateOrderReq, opts ...grpc.CallOption) (*CreateOrderRsp, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.CreateOrderCheck(ctx, in, opts...)
}

// 回滚订单
func (m *defaultOrder) RollbackOrder(ctx context.Context, in *CreateOrderReq, opts ...grpc.CallOption) (*CreateOrderRsp, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.RollbackOrder(ctx, in, opts...)
}

// 创建订单try
func (m *defaultOrder) CreateOrderDTM(ctx context.Context, in *AddOrderReq, opts ...grpc.CallOption) (*AddOrderRsp, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.CreateOrderDTM(ctx, in, opts...)
}

// 回撤
func (m *defaultOrder) CreateOrderDTMRevert(ctx context.Context, in *AddOrderReq, opts ...grpc.CallOption) (*AddOrderRsp, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.CreateOrderDTMRevert(ctx, in, opts...)
}

func (m *defaultOrder) GetOrderByOrdernum(ctx context.Context, in *GetOrderByOrdernumReq, opts ...grpc.CallOption) (*GetOrderByOrdernumRsp, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.GetOrderByOrdernum(ctx, in, opts...)
}
