// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"hnchain/common/distributedid"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	orderitemFieldNames          = builder.RawFieldNames(&Orderitem{}, true)
	orderitemRows                = strings.Join(orderitemFieldNames, ",")
	orderitemRowsExpectAutoSet   = strings.Join(stringx.Remove(orderitemFieldNames), ",")
	orderitemRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(orderitemFieldNames, "id"))

	cachePublicOrderitemIdPrefix = "cache:public:orderitem:id:"
)

type (
	orderitemModel interface {
		Insert(ctx context.Context, data *Orderitem) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Orderitem, error)
		Update(ctx context.Context, data *Orderitem) error
		Delete(ctx context.Context, id int64) error
	}

	defaultOrderitemModel struct {
		sqlc.CachedConn
		table string
	}

	Orderitem struct {
		Id           int64     `db:"id"`
		Ordernum     string    `db:"ordernum"`     // 订单号
		Userid       int64     `db:"userid"`       // 用户id
		Productid    int64     `db:"productid"`    // 商品id
		Productname  string    `db:"productname"`  // 商品名称
		Productimage string    `db:"productimage"` // 商品图片地址
		Currentprice float64     `db:"currentprice"` // 生成订单时的商品单价，单位是元,保留两位小数
		Quantity     int32     `db:"quantity"`     // 商品总价,单位是元,保留两位小数
		Totalprice   float64     `db:"totalprice"`
		Createtime   time.Time `db:"createtime"`
		Updatetime   time.Time `db:"updatetime"`
	}
)

func newOrderitemModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultOrderitemModel {
	return &defaultOrderitemModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      `"public"."orderitem"`,
	}
}

func (m *defaultOrderitemModel) Delete(ctx context.Context, id int64) error {
	publicOrderitemIdKey := fmt.Sprintf("%s%v", cachePublicOrderitemIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where id = $1", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, publicOrderitemIdKey)
	return err
}

func (m *defaultOrderitemModel) FindOne(ctx context.Context, id int64) (*Orderitem, error) {
	publicOrderitemIdKey := fmt.Sprintf("%s%v", cachePublicOrderitemIdPrefix, id)
	var resp Orderitem
	err := m.QueryRowCtx(ctx, &resp, publicOrderitemIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", orderitemRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrderitemModel) Insert(ctx context.Context, data *Orderitem) (sql.Result, error) {
	
	idgenerator := distributedid.NewSnowflake(int64(1))
	data.Id = idgenerator.GenerateId()


	publicOrderitemIdKey := fmt.Sprintf("%s%v", cachePublicOrderitemIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)", m.table, orderitemRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.Ordernum, data.Userid, data.Productid, data.Productname, data.Productimage, data.Currentprice, data.Quantity, data.Totalprice, data.Createtime, data.Updatetime)
	}, publicOrderitemIdKey)
	return ret, err
}

func (m *defaultOrderitemModel) Update(ctx context.Context, data *Orderitem) error {
	publicOrderitemIdKey := fmt.Sprintf("%s%v", cachePublicOrderitemIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, orderitemRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Id, data.Ordernum, data.Userid, data.Productid, data.Productname, data.Productimage, data.Currentprice, data.Quantity, data.Totalprice, data.Createtime, data.Updatetime)
	}, publicOrderitemIdKey)
	return err
}

func (m *defaultOrderitemModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cachePublicOrderitemIdPrefix, primary)
}

func (m *defaultOrderitemModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", orderitemRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultOrderitemModel) tableName() string {
	return m.table
}
