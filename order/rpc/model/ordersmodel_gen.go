// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"hnchain/common/distributedid"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	ordersFieldNames          = builder.RawFieldNames(&Orders{}, true)
	ordersRows                = strings.Join(ordersFieldNames, ",")
	ordersRowsExpectAutoSet   = strings.Join(stringx.Remove(ordersFieldNames), ",")
	ordersRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(ordersFieldNames, "id"))

	cachePublicOrdersIdPrefix       = "cache:public:orders:id:"
	cachePublicOrdersOrdernumPrefix = "cache:public:orders:ordernum:"
)

type (
	ordersModel interface {
		Insert(ctx context.Context, data *Orders) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Orders, error)
		FindOneByOrdernum(ctx context.Context, ordernum string) (*Orders, error)
		Update(ctx context.Context, data *Orders) error
		Delete(ctx context.Context, id int64) error
	}

	defaultOrdersModel struct {
		sqlc.CachedConn
		table string
	}

	Orders struct {
		Id          int64     `db:"id"`
		Ordernum    string    `db:"ordernum"`    // 订单号
		Userid      int64     `db:"userid"`      // 用户id
		Shoppingid  int64     `db:"shoppingid"`  // 收货信息表id
		Payment     float64    `db:"payment"`     // 实际付款金额,单位是元,保留两位小数
		Paymenttype int32     `db:"paymenttype"` // 支付类型,1-在线支付
		Postage     float64     `db:"postage"`     // 运费,单位是元
		Status      int32     `db:"status"`      // 订单状态:0-已取消-10-未付款，20-已付款，30-待发货 40-待收货，50-交易成功，60-交易关闭
		Createtime  time.Time `db:"createtime"`
		Updatetime  time.Time `db:"updatetime"`
	}
)

func newOrdersModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultOrdersModel {
	return &defaultOrdersModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      `"public"."orders"`,
	}
}

func (m *defaultOrdersModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	publicOrdersIdKey := fmt.Sprintf("%s%v", cachePublicOrdersIdPrefix, id)
	publicOrdersOrdernumKey := fmt.Sprintf("%s%v", cachePublicOrdersOrdernumPrefix, data.Ordernum)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where id = $1", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, publicOrdersIdKey, publicOrdersOrdernumKey)
	return err
}

func (m *defaultOrdersModel) FindOne(ctx context.Context, id int64) (*Orders, error) {
	publicOrdersIdKey := fmt.Sprintf("%s%v", cachePublicOrdersIdPrefix, id)
	var resp Orders
	err := m.QueryRowCtx(ctx, &resp, publicOrdersIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", ordersRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrdersModel) FindOneByOrdernum(ctx context.Context, ordernum string) (*Orders, error) {
	publicOrdersOrdernumKey := fmt.Sprintf("%s%v", cachePublicOrdersOrdernumPrefix, ordernum)
	var resp Orders
	err := m.QueryRowIndexCtx(ctx, &resp, publicOrdersOrdernumKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where ordernum = $1 limit 1", ordersRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, ordernum); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrdersModel) Insert(ctx context.Context, data *Orders) (sql.Result, error) {
	
	idgenerator := distributedid.NewSnowflake(int64(1))
	data.Id = idgenerator.GenerateId()


	publicOrdersIdKey := fmt.Sprintf("%s%v", cachePublicOrdersIdPrefix, data.Id)
	publicOrdersOrdernumKey := fmt.Sprintf("%s%v", cachePublicOrdersOrdernumPrefix, data.Ordernum)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)", m.table, ordersRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.Ordernum, data.Userid, data.Shoppingid, data.Payment, data.Paymenttype, data.Postage, data.Status, data.Createtime, data.Updatetime)
	}, publicOrdersIdKey, publicOrdersOrdernumKey)
	return ret, err
}

func (m *defaultOrdersModel) Update(ctx context.Context, newData *Orders) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	publicOrdersIdKey := fmt.Sprintf("%s%v", cachePublicOrdersIdPrefix, data.Id)
	publicOrdersOrdernumKey := fmt.Sprintf("%s%v", cachePublicOrdersOrdernumPrefix, data.Ordernum)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, ordersRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Id, newData.Ordernum, newData.Userid, newData.Shoppingid, newData.Payment, newData.Paymenttype, newData.Postage, newData.Status, newData.Createtime, newData.Updatetime)
	}, publicOrdersIdKey, publicOrdersOrdernumKey)
	return err
}

func (m *defaultOrdersModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cachePublicOrdersIdPrefix, primary)
}

func (m *defaultOrdersModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", ordersRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultOrdersModel) tableName() string {
	return m.table
}
