// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"hnchain/common/distributedid"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	hnuserRevAddrFieldNames          = builder.RawFieldNames(&HnuserRevAddr{}, true)
	hnuserRevAddrRows                = strings.Join(hnuserRevAddrFieldNames, ",")
	hnuserRevAddrRowsExpectAutoSet   = strings.Join(stringx.Remove(hnuserRevAddrFieldNames), ",")
	hnuserRevAddrRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(hnuserRevAddrFieldNames, "id"))

	cachePublicHnuserRevAddrIdPrefix = "cache:public:hnuserRevAddr:id:"
)

type (
	hnuserRevAddrModel interface {
		Insert(ctx context.Context, data *HnuserRevAddr) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*HnuserRevAddr, error)
		Update(ctx context.Context, data *HnuserRevAddr) error
		Delete(ctx context.Context, id int64) error
	}

	defaultHnuserRevAddrModel struct {
		sqlc.CachedConn
		table string
	}

	HnuserRevAddr struct {
		Id            int64     `db:"id"`
		Uid           int64     `db:"uid"`
		Name          string    `db:"name"`      // 收货人名称
		Phone         string    `db:"phone"`     // 手机号
		Isdefault     bool      `db:"isdefault"` // 是否为默认地址
		Postcode      string    `db:"postcode"`  // 邮政编码
		Province      string    `db:"province"`
		City          string    `db:"city"`           // 省份/直辖市
		Region        string    `db:"region"`         // 区
		DetailAddress string    `db:"detail_address"` // 详细地址(街道)
		Isdelete      bool      `db:"isdelete"`       // 是否删除
		Createtime    time.Time `db:"createtime"`
		Updatetime    time.Time `db:"updatetime"`
	}

	HnuserRevAddrId struct {
		Id            int64     `db:"id"`
	}
)

func newHnuserRevAddrModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultHnuserRevAddrModel {
	return &defaultHnuserRevAddrModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      `"public"."hnuser_rev_addr"`,
	}
}

func (m *defaultHnuserRevAddrModel) Delete(ctx context.Context, id int64) error {
	publicHnuserRevAddrIdKey := fmt.Sprintf("%s%v", cachePublicHnuserRevAddrIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where id = $1", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, publicHnuserRevAddrIdKey)
	return err
}

func (m *defaultHnuserRevAddrModel) FindOne(ctx context.Context, id int64) (*HnuserRevAddr, error) {
	publicHnuserRevAddrIdKey := fmt.Sprintf("%s%v", cachePublicHnuserRevAddrIdPrefix, id)
	var resp HnuserRevAddr
	err := m.QueryRowCtx(ctx, &resp, publicHnuserRevAddrIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", hnuserRevAddrRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultHnuserRevAddrModel) Insert(ctx context.Context, data *HnuserRevAddr) (sql.Result, error) {

	idgenerator := distributedid.NewSnowflake(int64(1))
	data.Id = idgenerator.GenerateId()

	publicHnuserRevAddrIdKey := fmt.Sprintf("%s%v", cachePublicHnuserRevAddrIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13)", m.table, hnuserRevAddrRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.Uid, data.Name, data.Phone, data.Isdefault, data.Postcode, data.Province, data.City, data.Region, data.DetailAddress, data.Isdelete, data.Createtime, data.Updatetime)
	}, publicHnuserRevAddrIdKey)
	return ret, err
}

func (m *defaultHnuserRevAddrModel) Update(ctx context.Context, data *HnuserRevAddr) error {
	publicHnuserRevAddrIdKey := fmt.Sprintf("%s%v", cachePublicHnuserRevAddrIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, hnuserRevAddrRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Id, data.Uid, data.Name, data.Phone, data.Isdefault, data.Postcode, data.Province, data.City, data.Region, data.DetailAddress, data.Isdelete, data.Createtime, data.Updatetime)
	}, publicHnuserRevAddrIdKey)
	return err
}

func (m *defaultHnuserRevAddrModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cachePublicHnuserRevAddrIdPrefix, primary)
}

func (m *defaultHnuserRevAddrModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", hnuserRevAddrRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultHnuserRevAddrModel) tableName() string {
	return m.table
}
