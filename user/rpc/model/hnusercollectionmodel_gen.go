// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"hnchain/common/distributedid"
	"strings"
	"time"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	hnuserCollectionFieldNames          = builder.RawFieldNames(&HnuserCollection{}, true)
	hnuserCollectionRows                = strings.Join(hnuserCollectionFieldNames, ",")
	hnuserCollectionRowsExpectAutoSet   = strings.Join(stringx.Remove(hnuserCollectionFieldNames), ",")
	hnuserCollectionRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(hnuserCollectionFieldNames, "id"))

	cachePublicHnuserCollectionIdPrefix = "cache:public:hnuserCollection:id:"
)

type (
	hnuserCollectionModel interface {
		Insert(ctx context.Context, data *HnuserCollection) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*HnuserCollection, error)
		Update(ctx context.Context, data *HnuserCollection) error
		Delete(ctx context.Context, id int64) error
	}

	defaultHnuserCollectionModel struct {
		sqlc.CachedConn
		table string
	}

	HnuserCollection struct {
		Id         int64     `db:"id"`
		Uid        int64     `db:"uid"`       // 用户id
		Productid  int64     `db:"productid"` // 商品id
		Isdelete   bool      `db:"isdelete"`  // 是否删除
		Createtime time.Time `db:"createtime"`
		Updatetime time.Time `db:"updatetime"`
	}
)

func newHnuserCollectionModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultHnuserCollectionModel {
	return &defaultHnuserCollectionModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      `"public"."hnuser_collection"`,
	}
}

func (m *defaultHnuserCollectionModel) Delete(ctx context.Context, id int64) error {
	publicHnuserCollectionIdKey := fmt.Sprintf("%s%v", cachePublicHnuserCollectionIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where id = $1", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, publicHnuserCollectionIdKey)
	return err
}

func (m *defaultHnuserCollectionModel) FindOne(ctx context.Context, id int64) (*HnuserCollection, error) {
	publicHnuserCollectionIdKey := fmt.Sprintf("%s%v", cachePublicHnuserCollectionIdPrefix, id)
	var resp HnuserCollection
	err := m.QueryRowCtx(ctx, &resp, publicHnuserCollectionIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", hnuserCollectionRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultHnuserCollectionModel) Insert(ctx context.Context, data *HnuserCollection) (sql.Result, error) {
	idgenerator := distributedid.NewSnowflake(int64(1))
	data.Id = idgenerator.GenerateId()
	publicHnuserCollectionIdKey := fmt.Sprintf("%s%v", cachePublicHnuserCollectionIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6)", m.table, hnuserCollectionRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.Uid, data.Productid, data.Isdelete, data.Createtime, data.Updatetime)
	}, publicHnuserCollectionIdKey)
	return ret, err
}

func (m *defaultHnuserCollectionModel) Update(ctx context.Context, data *HnuserCollection) error {
	publicHnuserCollectionIdKey := fmt.Sprintf("%s%v", cachePublicHnuserCollectionIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, hnuserCollectionRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Id, data.Uid, data.Productid, data.Isdelete, data.Createtime, data.Updatetime)
	}, publicHnuserCollectionIdKey)
	return err
}

func (m *defaultHnuserCollectionModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cachePublicHnuserCollectionIdPrefix, primary)
}

func (m *defaultHnuserCollectionModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", hnuserCollectionRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultHnuserCollectionModel) tableName() string {
	return m.table
}
