// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.11.4
// source: user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	User_Login_FullMethodName                 = "/user.User/Login"
	User_UserInfo_FullMethodName              = "/user.User/UserInfo"
	User_RegisterUser_FullMethodName          = "/user.User/RegisterUser"
	User_AddUserRevAddr_FullMethodName        = "/user.User/AddUserRevAddr"
	User_EditUserRevAddr_FullMethodName       = "/user.User/EditUserRevAddr"
	User_DelUserRevAddr_FullMethodName        = "/user.User/DelUserRevAddr"
	User_GetUserRevAddrList_FullMethodName    = "/user.User/getUserRevAddrList"
	User_AddUserCollection_FullMethodName     = "/user.User/AddUserCollection"
	User_DelUserCollection_FullMethodName     = "/user.User/DelUserCollection"
	User_GetUserCollectionList_FullMethodName = "/user.User/GetUserCollectionList"
	User_GetUserRevAddrInfo_FullMethodName    = "/user.User/getUserRevAddrInfo"
)

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	// 登录
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// 获得用户信息
	UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
	// 注册用户
	RegisterUser(ctx context.Context, in *RegisterUserReq, opts ...grpc.CallOption) (*RegisterUserRes, error)
	// 添加收获地址
	AddUserRevAddr(ctx context.Context, in *UserRevAddrAddReq, opts ...grpc.CallOption) (*UserRevAddrAddRes, error)
	// 编辑收获地址
	EditUserRevAddr(ctx context.Context, in *UserRevAddrEditReq, opts ...grpc.CallOption) (*UserRevAddrEditRes, error)
	// 删除收获地址
	DelUserRevAddr(ctx context.Context, in *UserRevAddrDelReq, opts ...grpc.CallOption) (*UserCollectionDelRes, error)
	// 获取收获地址列表
	GetUserRevAddrList(ctx context.Context, in *UserRevAddrListReq, opts ...grpc.CallOption) (*UserRevAddrListRes, error)
	// 添加收藏
	AddUserCollection(ctx context.Context, in *UserCollectionAddReq, opts ...grpc.CallOption) (*UserCollectionAddRes, error)
	// 删除收藏
	DelUserCollection(ctx context.Context, in *UserCollectionDelReq, opts ...grpc.CallOption) (*UserCollectionDelRes, error)
	// 收藏列表
	GetUserCollectionList(ctx context.Context, in *UserCollectionListReq, opts ...grpc.CallOption) (*UserCollectionListRes, error)
	// 根据主键id,查询收获地址
	GetUserRevAddrInfo(ctx context.Context, in *UserRevAddrInfoReq, opts ...grpc.CallOption) (*UserRevAddr, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, User_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	out := new(UserInfoResponse)
	err := c.cc.Invoke(ctx, User_UserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) RegisterUser(ctx context.Context, in *RegisterUserReq, opts ...grpc.CallOption) (*RegisterUserRes, error) {
	out := new(RegisterUserRes)
	err := c.cc.Invoke(ctx, User_RegisterUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AddUserRevAddr(ctx context.Context, in *UserRevAddrAddReq, opts ...grpc.CallOption) (*UserRevAddrAddRes, error) {
	out := new(UserRevAddrAddRes)
	err := c.cc.Invoke(ctx, User_AddUserRevAddr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) EditUserRevAddr(ctx context.Context, in *UserRevAddrEditReq, opts ...grpc.CallOption) (*UserRevAddrEditRes, error) {
	out := new(UserRevAddrEditRes)
	err := c.cc.Invoke(ctx, User_EditUserRevAddr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DelUserRevAddr(ctx context.Context, in *UserRevAddrDelReq, opts ...grpc.CallOption) (*UserCollectionDelRes, error) {
	out := new(UserCollectionDelRes)
	err := c.cc.Invoke(ctx, User_DelUserRevAddr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserRevAddrList(ctx context.Context, in *UserRevAddrListReq, opts ...grpc.CallOption) (*UserRevAddrListRes, error) {
	out := new(UserRevAddrListRes)
	err := c.cc.Invoke(ctx, User_GetUserRevAddrList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AddUserCollection(ctx context.Context, in *UserCollectionAddReq, opts ...grpc.CallOption) (*UserCollectionAddRes, error) {
	out := new(UserCollectionAddRes)
	err := c.cc.Invoke(ctx, User_AddUserCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DelUserCollection(ctx context.Context, in *UserCollectionDelReq, opts ...grpc.CallOption) (*UserCollectionDelRes, error) {
	out := new(UserCollectionDelRes)
	err := c.cc.Invoke(ctx, User_DelUserCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserCollectionList(ctx context.Context, in *UserCollectionListReq, opts ...grpc.CallOption) (*UserCollectionListRes, error) {
	out := new(UserCollectionListRes)
	err := c.cc.Invoke(ctx, User_GetUserCollectionList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserRevAddrInfo(ctx context.Context, in *UserRevAddrInfoReq, opts ...grpc.CallOption) (*UserRevAddr, error) {
	out := new(UserRevAddr)
	err := c.cc.Invoke(ctx, User_GetUserRevAddrInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	// 登录
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	// 获得用户信息
	UserInfo(context.Context, *UserInfoRequest) (*UserInfoResponse, error)
	// 注册用户
	RegisterUser(context.Context, *RegisterUserReq) (*RegisterUserRes, error)
	// 添加收获地址
	AddUserRevAddr(context.Context, *UserRevAddrAddReq) (*UserRevAddrAddRes, error)
	// 编辑收获地址
	EditUserRevAddr(context.Context, *UserRevAddrEditReq) (*UserRevAddrEditRes, error)
	// 删除收获地址
	DelUserRevAddr(context.Context, *UserRevAddrDelReq) (*UserCollectionDelRes, error)
	// 获取收获地址列表
	GetUserRevAddrList(context.Context, *UserRevAddrListReq) (*UserRevAddrListRes, error)
	// 添加收藏
	AddUserCollection(context.Context, *UserCollectionAddReq) (*UserCollectionAddRes, error)
	// 删除收藏
	DelUserCollection(context.Context, *UserCollectionDelReq) (*UserCollectionDelRes, error)
	// 收藏列表
	GetUserCollectionList(context.Context, *UserCollectionListReq) (*UserCollectionListRes, error)
	// 根据主键id,查询收获地址
	GetUserRevAddrInfo(context.Context, *UserRevAddrInfoReq) (*UserRevAddr, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserServer) UserInfo(context.Context, *UserInfoRequest) (*UserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInfo not implemented")
}
func (UnimplementedUserServer) RegisterUser(context.Context, *RegisterUserReq) (*RegisterUserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedUserServer) AddUserRevAddr(context.Context, *UserRevAddrAddReq) (*UserRevAddrAddRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserRevAddr not implemented")
}
func (UnimplementedUserServer) EditUserRevAddr(context.Context, *UserRevAddrEditReq) (*UserRevAddrEditRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditUserRevAddr not implemented")
}
func (UnimplementedUserServer) DelUserRevAddr(context.Context, *UserRevAddrDelReq) (*UserCollectionDelRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelUserRevAddr not implemented")
}
func (UnimplementedUserServer) GetUserRevAddrList(context.Context, *UserRevAddrListReq) (*UserRevAddrListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRevAddrList not implemented")
}
func (UnimplementedUserServer) AddUserCollection(context.Context, *UserCollectionAddReq) (*UserCollectionAddRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserCollection not implemented")
}
func (UnimplementedUserServer) DelUserCollection(context.Context, *UserCollectionDelReq) (*UserCollectionDelRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelUserCollection not implemented")
}
func (UnimplementedUserServer) GetUserCollectionList(context.Context, *UserCollectionListReq) (*UserCollectionListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCollectionList not implemented")
}
func (UnimplementedUserServer) GetUserRevAddrInfo(context.Context, *UserRevAddrInfoReq) (*UserRevAddr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRevAddrInfo not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserInfo(ctx, req.(*UserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_RegisterUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).RegisterUser(ctx, req.(*RegisterUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AddUserRevAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRevAddrAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddUserRevAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_AddUserRevAddr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddUserRevAddr(ctx, req.(*UserRevAddrAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_EditUserRevAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRevAddrEditReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).EditUserRevAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_EditUserRevAddr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).EditUserRevAddr(ctx, req.(*UserRevAddrEditReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DelUserRevAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRevAddrDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DelUserRevAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_DelUserRevAddr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DelUserRevAddr(ctx, req.(*UserRevAddrDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserRevAddrList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRevAddrListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserRevAddrList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetUserRevAddrList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserRevAddrList(ctx, req.(*UserRevAddrListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AddUserCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCollectionAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddUserCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_AddUserCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddUserCollection(ctx, req.(*UserCollectionAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DelUserCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCollectionDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DelUserCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_DelUserCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DelUserCollection(ctx, req.(*UserCollectionDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserCollectionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCollectionListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserCollectionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetUserCollectionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserCollectionList(ctx, req.(*UserCollectionListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserRevAddrInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRevAddrInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserRevAddrInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetUserRevAddrInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserRevAddrInfo(ctx, req.(*UserRevAddrInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _User_Login_Handler,
		},
		{
			MethodName: "UserInfo",
			Handler:    _User_UserInfo_Handler,
		},
		{
			MethodName: "RegisterUser",
			Handler:    _User_RegisterUser_Handler,
		},
		{
			MethodName: "AddUserRevAddr",
			Handler:    _User_AddUserRevAddr_Handler,
		},
		{
			MethodName: "EditUserRevAddr",
			Handler:    _User_EditUserRevAddr_Handler,
		},
		{
			MethodName: "DelUserRevAddr",
			Handler:    _User_DelUserRevAddr_Handler,
		},
		{
			MethodName: "getUserRevAddrList",
			Handler:    _User_GetUserRevAddrList_Handler,
		},
		{
			MethodName: "AddUserCollection",
			Handler:    _User_AddUserCollection_Handler,
		},
		{
			MethodName: "DelUserCollection",
			Handler:    _User_DelUserCollection_Handler,
		},
		{
			MethodName: "GetUserCollectionList",
			Handler:    _User_GetUserCollectionList_Handler,
		},
		{
			MethodName: "getUserRevAddrInfo",
			Handler:    _User_GetUserRevAddrInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
